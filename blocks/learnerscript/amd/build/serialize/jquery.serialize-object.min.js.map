{"version":3,"file":"jquery.serialize-object.min.js","sources":["../../src/serialize/jquery.serialize-object.js"],"sourcesContent":["/**\n * jQuery serializeObject\n * @copyright 2014, macek <paulmacek@gmail.com>\n * @link https://github.com/macek/jquery-serialize-object\n * @license BSD\n * @version 2.5.0\n */\n(function(root, factory) {\n\n    // AMD\n    if (typeof define === \"function\" && define.amd) {\n      define([\"exports\", \"jquery\"], function(exports, $) {\n        return factory(exports, $);\n      });\n    }\n\n    // CommonJS\n    else if (typeof exports !== \"undefined\") {\n      var $ = require(\"jquery\");\n      factory(exports, $);\n    }\n\n    // Browser\n    else {\n      factory(root, (root.jQuery || root.Zepto || root.ender || root.$));\n    }\n\n  }(this, function(exports, $) {\n\n    var patterns = {\n      validate: /^[a-z_][a-z0-9_]*(?:\\[(?:\\d*|[a-z0-9_]+)\\])*$/i,\n      key:      /[a-z0-9_]+|(?=\\[\\])/gi,\n      push:     /^$/,\n      fixed:    /^\\d+$/,\n      named:    /^[a-z0-9_]+$/i\n    };\n\n    function FormSerializer(helper, $form) {\n\n      // private variables\n      var data     = {},\n          pushes   = {};\n\n      // private API\n      function build(base, key, value) {\n        base[key] = value;\n        return base;\n      }\n\n      function makeObject(root, value) {\n\n        var keys = root.match(patterns.key), k;\n\n        // nest, nest, ..., nest\n        while ((k = keys.pop()) !== undefined) {\n          // foo[]\n          if (patterns.push.test(k)) {\n            var idx = incrementPush(root.replace(/\\[\\]$/, ''));\n            value = build([], idx, value);\n          }\n\n          // foo[n]\n          else if (patterns.fixed.test(k)) {\n            value = build([], k, value);\n          }\n\n          // foo; foo[bar]\n          else if (patterns.named.test(k)) {\n            value = build({}, k, value);\n          }\n        }\n\n        return value;\n      }\n\n      function incrementPush(key) {\n        if (pushes[key] === undefined) {\n          pushes[key] = 0;\n        }\n        return pushes[key]++;\n      }\n\n      function encode(pair) {\n        switch ($('[name=\"' + pair.name + '\"]', $form).attr(\"type\")) {\n          case \"checkbox\":\n            return pair.value === \"on\" ? true : pair.value;\n          default:\n            return pair.value;\n        }\n      }\n\n      function addPair(pair) {\n        if (!patterns.validate.test(pair.name)) return this;\n        var obj = makeObject(pair.name, encode(pair));\n        data = helper.extend(true, data, obj);\n        return this;\n      }\n\n      function addPairs(pairs) {\n        if (!helper.isArray(pairs)) {\n          throw new Error(\"formSerializer.addPairs expects an Array\");\n        }\n        for (var i=0, len=pairs.length; i<len; i++) {\n          this.addPair(pairs[i]);\n        }\n        return this;\n      }\n\n      function serialize() {\n        return data;\n      }\n\n      function serializeJSON() {\n        return JSON.stringify(serialize());\n      }\n\n      // public API\n      this.addPair = addPair;\n      this.addPairs = addPairs;\n      this.serialize = serialize;\n      this.serializeJSON = serializeJSON;\n    }\n\n    FormSerializer.patterns = patterns;\n\n    FormSerializer.serializeObject = function serializeObject() {\n      return new FormSerializer($, this).\n        addPairs(this.serializeArray()).\n        serialize();\n    };\n\n    FormSerializer.serializeJSON = function serializeJSON() {\n      return new FormSerializer($, this).\n        addPairs(this.serializeArray()).\n        serializeJSON();\n    };\n\n    if (typeof $.fn !== \"undefined\") {\n      $.fn.serializeObject = FormSerializer.serializeObject;\n      $.fn.serializeJSON   = FormSerializer.serializeJSON;\n    }\n\n    exports.FormSerializer = FormSerializer;\n\n    return FormSerializer;\n  }));"],"names":["root","factory","define","amd","exports","$","require","jQuery","Zepto","ender","this","patterns","validate","key","push","fixed","named","FormSerializer","helper","$form","data","pushes","build","base","value","incrementPush","undefined","serialize","addPair","pair","test","name","obj","k","keys","match","pop","replace","makeObject","attr","encode","extend","addPairs","pairs","isArray","Error","i","len","length","serializeJSON","JSON","stringify","serializeObject","serializeArray","fn"],"mappings":";;;;;;;CAOC,SAASA,KAAMC,SAGZ,GAAsB,mBAAXC,QAAyBA,OAAOC,IACzCD,+DAAO,CAAC,UAAW,WAAW,SAASE,QAASC,GAC9C,OAAOJ,QAAQG,QAASC,WAKvB,GAAuB,oBAAZD,QAAyB,CACvC,IAAIC,EAAIC,QAAQ,UAChBL,QAAQG,QAASC,QAKjBJ,QAAQD,KAAOA,KAAKO,QAAUP,KAAKQ,OAASR,KAAKS,OAAST,KAAKK,EAGlE,CApBF,CAoBGK,QAAM,SAASN,QAASC,GAExB,IAAIM,SAAW,CACbC,SAAU,iDACVC,IAAU,wBACVC,KAAU,KACVC,MAAU,QACVC,MAAU,iBAGZ,SAASC,eAAeC,OAAQC,OAG9B,IAAIC,KAAW,GACXC,OAAW,GAGf,SAASC,MAAMC,KAAMV,IAAKW,OAExB,OADAD,KAAKV,KAAOW,MACLD,KA6BT,SAASE,cAAcZ,KAIrB,YAHoBa,IAAhBL,OAAOR,OACTQ,OAAOR,KAAO,GAETQ,OAAOR,OA6BhB,SAASc,YACP,OAAOP,KAQTV,KAAKkB,QA1BL,SAAiBC,MACf,IAAKlB,SAASC,SAASkB,KAAKD,KAAKE,MAAO,OAAOrB,KAC/C,IAAIsB,IA5CN,SAAoBhC,KAAMwB,OAKxB,IAHA,IAAqCS,EAAjCC,KAAOlC,KAAKmC,MAAMxB,SAASE,UAGHa,KAApBO,EAAIC,KAAKE,QAEXzB,SAASG,KAAKgB,KAAKG,GAErBT,MAAQF,MAAM,GADJG,cAAczB,KAAKqC,QAAQ,QAAS,KACvBb,OAIhBb,SAASI,MAAMe,KAAKG,GAC3BT,MAAQF,MAAM,GAAIW,EAAGT,OAIdb,SAASK,MAAMc,KAAKG,KAC3BT,MAAQF,MAAM,GAAIW,EAAGT,QAIzB,OAAOA,MAqBGc,CAAWT,KAAKE,KAX5B,SAAgBF,MACd,MACO,aADCxB,EAAE,UAAYwB,KAAKE,KAAO,KAAMZ,OAAOoB,KAAK,SAE1B,OAAfV,KAAKL,OAELK,KAAKL,MAMgBgB,CAAOX,OAEvC,OADAT,KAAOF,OAAOuB,QAAO,EAAMrB,KAAMY,KAC1BtB,MAuBTA,KAAKgC,SApBL,SAAkBC,OAChB,IAAKzB,OAAO0B,QAAQD,OAClB,MAAM,IAAIE,MAAM,4CAElB,IAAK,IAAIC,EAAE,EAAGC,IAAIJ,MAAMK,OAAQF,EAAEC,IAAKD,IACrCpC,KAAKkB,QAAQe,MAAMG,IAErB,OAAOpC,MAcTA,KAAKiB,UAAYA,UACjBjB,KAAKuC,cARL,WACE,OAAOC,KAAKC,UAAUxB,cA+B1B,OArBAV,eAAeN,SAAWA,SAE1BM,eAAemC,gBAAkB,WAC/B,OAAO,IAAInC,eAAeZ,EAAGK,MAC3BgC,SAAShC,KAAK2C,kBACd1B,aAGJV,eAAegC,cAAgB,WAC7B,OAAO,IAAIhC,eAAeZ,EAAGK,MAC3BgC,SAAShC,KAAK2C,kBACdJ,sBAGgB,IAAT5C,EAAEiD,KACXjD,EAAEiD,GAAGF,gBAAkBnC,eAAemC,gBACtC/C,EAAEiD,GAAGL,cAAkBhC,eAAegC,eAGxC7C,QAAQa,eAAiBA,eAElBA,cACT"}